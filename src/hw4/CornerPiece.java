package hw4;

import api.*;

/**
 * implementation of a Corner Piece extending Abstract Piece
 * @author alexfreiberg
 */

public class CornerPiece extends AbstractPiece{
/**	
 * instance variable for number of transforms performed on a specific object
 */
	private int transforms = 0;
	
/**
 * Constructs a new Corner Piece with the given position and containing the given random icons 
 * in the given icon array
 * @param givenPosition
 * 		given starting position of the new corner piece
 * @param icons
 * 		given icon array containing random icons generated by the basic generator
 */
	public CornerPiece(Position givenPosition, Icon[] icons) {
		super(givenPosition, icons);
		cells = new Cell[3];
		cells[0] = new Cell(icons[0], new Position(0,0));
		cells[1] = new Cell(icons[1], new Position(1,0));
		cells[2] = new Cell(icons[2], new Position(1,1));
		
	}

/*
 * 	transforms the Corner Piece by rotating it around its possible 2 by 2 grid
 */
	@Override
	public void transform() {
		transforms++;
		// TODO Auto-generated method stub
		Position[] possibilities = 
			{
				new Position(0,0),
				new Position(0,1),
				new Position(1,1),
				new Position(1,0)
			};
		
		if(transforms == 1) {
			cells[0].setPosition(possibilities[1]);
			cells[1].setPosition(possibilities[0]);
			cells[2].setPosition(possibilities[3]);
		}else if(transforms == 2) {
			cells[0].setPosition(possibilities[2]);
			cells[1].setPosition(possibilities[1]);
			cells[2].setPosition(possibilities[0]);
		}else if(transforms == 3) {
			cells[0].setPosition(possibilities[3]);
			cells[1].setPosition(possibilities[2]);
			cells[2].setPosition(possibilities[1]);
		}else if(transforms == 4) {
			cells[0].setPosition(possibilities[0]);
			cells[1].setPosition(possibilities[3]);
			cells[2].setPosition(possibilities[2]);
			transforms = 0;
		}
		
	}
}
